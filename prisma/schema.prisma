generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id() @default(autoincrement())
  phone       String      @unique()
  name        String
  password    String
  role        UserRole
  accountType AccountType
  bloodGroup  BloodGroup
  createdAt   DateTime    @default(now())

  nidNumber              String? @unique
  birthCertificateNumber String? @unique

  email         String?
  birthDate     DateTime?
  avatar_fileId String?
  avatar_url    String?

  student_educationalInstitute String?
  student_department           String?
  student_session              String?
  student_rollNumber           String?
  student_registrationNumber   String?

  X_donations              BloodDonation[] @relation("BloodDonationUser")
  X_donationsCreated       BloodDonation[] @relation("BloodDonationCreatedBy")
  X_donationsStatusUpdated BloodDonation[] @relation("BloodDonationStatusUpdatedBy")
  X_bloodRequests          BloodRequest[]  @relation("BloodRequestOwner")
  X_requestCreator         BloodRequest[]  @relation("BloodRequestCreator")
  X_requestAssignedDonor   BloodRequest[]  @relation("BloodRequestAssignDonors")
}

model BloodDonation {
  id         String              @id @default(uuid())
  status     BloodDonationStatus @default(PENDING)
  bloodGroup BloodGroup

  userId Int
  user   User @relation("BloodDonationUser", fields: [userId], references: [id], onDelete: Cascade)

  createdAt   DateTime @default(now())
  createdById Int
  createdBy   User     @relation("BloodDonationCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  statusUpdatedAt     DateTime?
  statusUpdatedById   Int?
  statusUpdatedBy     User?     @relation("BloodDonationStatusUpdatedBy", fields: [statusUpdatedById], references: [id])
  statusUpdateComment String?
}

model BloodRequest {
  id         String     @id() @default(uuid())
  createdAt  DateTime   @default(now())
  bloodGroup BloodGroup
  amount     Int

  userId      Int
  user        User @relation("BloodRequestOwner", fields: [userId], references: [id], onDelete: Cascade)
  createdById Int
  createdBy   User @relation("BloodRequestCreator", fields: [createdById], references: [id], onDelete: Cascade)

  assignDonors User[] @relation("BloodRequestAssignDonors")
}

enum UserRole {
  MEMBER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum AccountType {
  GUEST
  STUDENT
  TEACHER
}

enum BloodGroup {
  A_POSITIVE
  A_NEGATIVE
  B_POSITIVE
  B_NEGATIVE
  O_POSITIVE
  O_NEGATIVE
  AB_POSITIVE
  AB_NEGATIVE
}

enum BloodDonationStatus {
  PENDING
  REJECTED
  COMPLETED
}
